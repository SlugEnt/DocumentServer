@page "/dialogdetails/{Id}"
@rendermode InteractiveServer
@using global::SlugEnt.DocumentServer.Db
@using global::SlugEnt.DocumentServer.Models.Entities
@using Humanizer
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.ChangeTracking.Internal
@using System.Text
@inject DocServerDbContext DB
@inject Radzen.DialogService dialogService
@inject TooltipService tooltipService


@if (_documentType == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenStack Gap="1rem">
        <RadzenRow>
            <RadzenColumn Size="12" SizeMD="6" Class="rz-p-4 rz-border-radius-1" Style="border: var(--rz-grid-cell-border)">
                <RadzenText TextStyle="TextStyle.Subtitle1">Document Info</RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                    <RadzenStack Gap="0" Class="rz-text-truncate">
                        <RadzenText TextStyle="TextStyle.Overline" Class="rz-mt-2 rz-my-0" Style="color: var(--rz-text-tertiary-color);">Name</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate"><b>@(_documentType.Name)</b></RadzenText>

                        <RadzenText TextStyle="TextStyle.Overline" Class="rz-mt-4 rz-mb-0" Style="color: var(--rz-text-tertiary-color);">Description</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate"><b>@_documentType.Description</b></RadzenText>

                        <RadzenText TextStyle="TextStyle.Overline" Class="rz-mt-4 rz-mb-0" Style="color: var(--rz-text-tertiary-color);">Primary Root Object</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate"><b>@rootObjectName</b></RadzenText>



                        <div Class="rz-mt-4 rz-mb-0">
                            <RadzenCheckBox ReadOnly=true @bind-Value=@_documentType.IsActive Name="IsActive"/>
                            <RadzenLabel Text="Is Active" Component="IsActive"  Style="color: var(--rz-text-tertiary-color);" />
                        </div>
                        <div Class="rz-mt-4 rz-mb-0">
                            <RadzenCheckBox ReadOnly=true @bind-Value=@_documentType.AllowSameDTEKeys Name="DTK" />
                            <RadzenLabel Text="Allow Multple Same External Keys" Component="DTK"  Style="color: var(--rz-text-tertiary-color);"/>
                        </div>
                        
                    </RadzenStack>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="6" Class="rz-p-4 rz-border-radius-1" Style="border: var(--rz-grid-cell-border)">
                <RadzenText TextStyle="TextStyle.Subtitle1">Storage Information</RadzenText>
                <RadzenStack Gap="0" Class="rz-text-truncate">
                    <RadzenText TextStyle="TextStyle.Overline" Class="rz-mt-2 rz-my-0" Style="color: var(--rz-text-tertiary-color);">Primary Storage Node</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate"><b>@(storageNode1Name) [ @storageNode1Id]</b></RadzenText>

                    <RadzenText TextStyle="TextStyle.Overline" Class="rz-mt-2 rz-my-0" Style="color: var(--rz-text-tertiary-color);">Secondary Storage Node</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate"><b>@(storageNode2Name) [ @storageNode2Id]</b></RadzenText>


                    <RadzenText TextStyle="TextStyle.Overline" Class="rz-mt-4 rz-mb-0" Style="color: var(--rz-text-tertiary-color);">Storage Mode</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate"><b>@_documentType.StorageMode.Humanize()</b></RadzenText>

                    <RadzenText TextStyle="TextStyle.Overline" Class="rz-mt-4 rz-mb-0" Style="color: var(--rz-text-tertiary-color);">Inactive Lifetime</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate" MouseEnter="@(args => ShowTooltipLifetime(args))">
                        <b>@_documentType.InActiveLifeTime</b>
                    </RadzenText>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

    </RadzenStack>
}


@code {
    [Parameter] public int ID { get; set; }

    private bool _isInitialized = false;
    DocumentType _documentType;

    string storageNode1Id   = "";
    string storageNode2Id   = "";
    string storageNode1Name = "";
    string storageNode2Name = "";
    string rootObjectName   = "Error - Unable to retrieve";

    protected override async Task OnInitializedAsync()
    {
        if (_isInitialized)
            return;

        //_documentType = await DB.DocumentTypes.SingleOrDefaultAsync(dt => dt.Id == ID);
        _documentType = await DB.DocumentTypes
                                .Include(dt => dt.RootObject)
                                .Include(dt => dt.ActiveStorageNode1)
                                .Include(dt => dt.ActiveStorageNode2)
                                .Where(dt => dt.Id == ID)
                                .FirstOrDefaultAsync();

        if (_documentType.ActiveStorageNode1 == null)
        {
            storageNode1Id   = "ND";
            storageNode1Name = "Not Defined";
        }
        else
        {
            storageNode1Id   = _documentType.ActiveStorageNode1Id.ToString();
            storageNode1Name = _documentType.ActiveStorageNode1.Name;
        }

        if (_documentType.ActiveStorageNode2 == null)
        {
            storageNode2Id   = "ND";
            storageNode2Name = "Not Defined";
        }
        else
        {
            storageNode2Id   = _documentType.ActiveStorageNode2Id.ToString();
            storageNode2Name = _documentType.ActiveStorageNode2.Name;
        }

        // This should never happen
        if (_documentType.RootObject != null)
            rootObjectName = _documentType.RootObject.Name;
        await base.OnInitializedAsync();
    }


    /// <summary>
    /// Displays the Lifetime Tooltip
    /// </summary>
    /// <param name="elementReference"></param>
    /// <param name="options"></param>
    protected void ShowTooltipLifetime(ElementReference elementReference,
                               TooltipOptions options = null)
    {
        options = new()
        {
            Duration = 20000,
            
        };
        StringBuilder sb = new("The Inactive Lifetime Setting determines how long after a particular Stored Document is no longer marked As Alive, before it can be considered for Archival or permanent removal.");
        tooltipService.Open(elementReference, sb.ToString(), options);
    }


}


