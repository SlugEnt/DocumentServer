@page "/documenttypes/crud/{mode}"
@page "/documenttypes/crud/{mode}/{recordId:int}"
@rendermode InteractiveServer
@inherits AbstractCRUDComponent

@using SlugEnt.DocumentServer.Models.Entities
@using global::SlugEnt.DocumentServer.Db
@using Microsoft.EntityFrameworkCore
@using SlugEnt.DocumentServer.Models.DTOS
@using global::DocumentServer.Core
@using SlugEnt.DocumentServer.Models.Enums
@using Humanizer
@using System.Linq.Dynamic.Core


@inject DocServerDbContext DB
@inject DocumentServerEngine docEngine


<h1>@_pageTitle</h1>
<hr />
<RadzenRow Gap="1rem">
    <RadzenColumn Size="12" SizeSM="6">
        @if (_errMsg != string.Empty)
        {
            <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@_errVisible" Text="@_errMsg"></RadzenAlert>
        }
        @if (_successMsg != string.Empty)
        {
            <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter" Text="@_successMsg"></RadzenAlert>
        }

        <RadzenStack>

            <RadzenColumn Size="6" SizeMD="4">
                <RadzenFormField Text="Name" Variant="@radDisplay" Style="width: 100%; max-width: 500px">
                    <RadzenTextBox @bind-Value="@_documentType.Name" ReadOnly="@_canEdit" />
                </RadzenFormField>
            </RadzenColumn>

            <RadzenColumn Size="3" SizeMD="2">
                <RadzenFormField Text="Description" Variant="@radDisplay" Style="width: 100%">
                    <RadzenTextBox @bind-Value="@_documentType.Description" ReadOnly="@_canEdit" />
                </RadzenFormField>
            </RadzenColumn>


            <RadzenColumn Size="3" SizeMD="2">
                <RadzenFormField Text="Storage Folder Name" Variant="@radDisplay" Style="width: 100%">
                    <RadzenTextBox @bind-Value="@_documentType.StorageFolderName" ReadOnly="@_canEdit"/>
                </RadzenFormField>
            </RadzenColumn>


            <RadzenColumn Size="2" SizeMD="2">
                <RadzenFormField Text="Application Associated With" Variant="@radDisplay" Style="width: 100%; max-width: 500px">
                    <RadzenDropDown Data=@_applications @bind-Value=@_documentType.ApplicationId TextProperty="Name" ValueProperty="Id" Style="width: 100%;" Name="DropDownBindValue" ReadOnly="@_canEdit" Disabled="@_isDisabled" Change="@AppChanged"/>
                </RadzenFormField>
            </RadzenColumn>


            <RadzenColumn Size="2" SizeMD="2">
                <RadzenFormField Text="Primary Root Object Associationh" Variant="@radDisplay" Style="width: 100%; max-width: 500px">
                    <RadzenDropDown Data=@_rootObjects  @bind-Value =@_documentType.RootObjectId TextProperty="Name" ValueProperty="Id" Style="width: 100%;" Name="DropDownBindValue" ReadOnly="@_canEdit" Disabled="@_isDisabled" />
                </RadzenFormField>
            </RadzenColumn>
            
            
            <RadzenColumn Size="2" SizeMD="2">
                <RadzenFormField Text="Storage Mode" Variant="@radDisplay" Style="width: 100%; max-width: 500px">
                    <RadzenDropDown Data="@(Enum.GetValues(typeof(EnumStorageMode)).Cast<Enum>())" @bind-Value="@_documentType.StorageMode"
                                    AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Style="width: 100%; max-width: 400px;" Name="DropDownStorageMode"/>
                </RadzenFormField>
            </RadzenColumn>


            <RadzenColumn Size="2" SizeMD="2">
                <RadzenFormField Text="Document Lifetime" Variant="@radDisplay" Style="width: 100%; max-width: 500px">
                    <RadzenDropDown Data="@(Enum.GetValues(typeof(EnumDocumentLifetimes)).Cast<Enum>())" @bind-Value="@_documentType.InActiveLifeTime"
                                    AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Style="width: 100%; max-width: 400px;" Name="DropDownDocLifetime"/>
                </RadzenFormField>
            </RadzenColumn>

        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
            @if (_isCreateMode)
            {
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Create" Click="@AddEntity" />
            }
            else if (_isEditMode)
            {
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save Changes" Click="@UpdateEntity" />
            }
            else if (_isDeleteMode)
            {
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="delete" Text="Confirm Deletion" Click="@DeleteEntity" />
            }
            else if (_wasDeleted)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Large" Icon="check_circle" Text="Return To List" Click="@ReturnToList" />
            }
            @if (_isCreateMode || _isEditMode || _isDeleteMode)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" Click="@Cancel" />
            }

        </RadzenStack>

    </RadzenColumn>
</RadzenRow>



@code {


    private DocumentType             _documentType = new();
    private IEnumerable<Application> _applications;
    private IEnumerable<RootObject>  _rootObjects = Enumerable.Empty<RootObject>();


    // Constructor
    public Crud() : base("Document Type")
    { }


    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        if (_isInitializeed)
            return;

        await base.OnInitializedAsync();
        _isInitializeed = true;
    }


    /// <summary>
    /// Do after parameter set stuff, such as load the entity record, etc
    /// </summary>
    /// <returns></returns>
    protected override async Task PostSetParametersAsync()
    {
        // Load list of Applications only once and only for Create mode
        if (_isCreateMode)
        {
            _applications = DB.Applications;

            //_rootObjects  = DB.RootObjects;

        }
        else
        {
            bool retrieveRecord = (_documentType == null || _documentType.Id != recordId) ? true : false;

            if (retrieveRecord)
            {
                _documentType = await DB.DocumentTypes.SingleOrDefaultAsync(dt => dt.Id == recordId);
                DB.RootObjects.Where(ro => ro.Id == _documentType.RootObjectId);
                DB.Applications.Where(ap => ap.Id == _documentType.ApplicationId);
            }
        }


        return;
    }


    public void AppChanged() { _rootObjects = DB.RootObjects.Where(ro => ro.ApplicationId == _documentType.ApplicationId); }


    /// <summary>
    /// Creates a new RootObject
    /// </summary>
    /// <returns></returns>
    public async Task AddEntity()
    {
        DB.DocumentTypes.Add(_documentType);
        await DB.SaveChangesAsync();
        ReturnToList();
    }


    /// <summary>
    /// Updates the RootObject
    /// </summary>
    /// <returns></returns>
    public async Task UpdateEntity()
    {
        DB.DocumentTypes.Update(_documentType);
        await DB.SaveChangesAsync();
        _successMsg = String.Format("RootObject {0} [ {1} ] was successfully updated.", _documentType.Name, _documentType.Id);
    }


    /// <summary>
    /// Deletes the RootOBject
    /// </summary>
    /// <returns></returns>
    public async Task DeleteEntity()
    {
        /*
        bool result = await docEngine.DocRootObjectDeleteAsync(_rootObject.Id);
        if (result)
        {
            _successMsg = String.Format("RootObject {0} [ {1} ] was successfully inactivated.", _rootObject.Name, _rootObject.Id);
            _wasDeleted = true;
            _isDeleteMode = false;
        }
        else
            _errMsg = string.Format("RootObject was not inactivated.  Unknown reason.");
            */
    }


    }
